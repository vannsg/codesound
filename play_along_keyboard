<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="codingSoundFavicon.ico" />

  <title>Lesson 05</title>

  <!--import Tone.js, link found here: https://cdnjs.com/libraries/tone-->

  <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/15.1.5/Tone.min.js"></script>

  <!--import AudioKeys-->

  <script src="https://cdn.jsdelivr.net/gh/kylestetz/AudioKeys@master/dist/audiokeys.min.js"></script>


  <!--import the webpage's stylesheet-->
  <link rel="stylesheet" href="style.css" />

</head>

<body>
  <!-- this is the start of content -->
  <h1>Keyboard Keyboard</h1>

  <p>Make sure your volume is up</p>

  <p>Play these black or white keys on your computer keyboard<br />

<p>Play these black or white keys on your computer keyboard<br />
    (not designed for mobile devices or touch screens)</p>

  </div>
<iframe width="420" height="345" src="https://www.youtube.com/embed/CMzY9IUfrrU">
</iframe>
<iframe width="420" height="345" src="https://www.youtube.com/embed/9c8xoqhLh3U">
</iframe>
<iframe width="420" height="345" src="https://www.youtube.com/embed/9c8xoqhLh3U">
</iframe>
  </div>

  <img
    src="https://camo.githubusercontent.com/9a2b15e8cc0b9f85d9a21f46fe250a2b6e5b1d7a4abe410afdcc39f9f467c487/68747470733a2f2f7261772e6769746875622e636f6d2f6b796c65737465747a2f617564696f6b6579732f6d61737465722f696d616765732f617564696f6b6579732d6d617070696e672d726f7773322e6a7067"
    alt="keyboard layout" style="width:80%">




  <!--BOTTOM-->
  <!--Nav Buttons-->
  <div class="button-row">
    <button class="left" onclick="location.href='index.html'">ToC</button>
    <button class="center"
      onclick="window.open('https://github.com/Interactimation/coding-sound/blob/main/lesson05.html', '_blank')">Code</button>
    <button class="right" onclick="window.open('lesson06.html')">Next</button>
 
   </div>



</div>


  <!--JAVASCRIPT-->

  <script>

    /* 
    KEYBOARD KEYBOARD
    * Based on: https://www.youtube.com/watch?v=vZ-3uPGclF8
    * Discover: 
    ** 1. AudioKeys README: https://github.com/kylestetz/AudioKeys/blob/master/README.md
    ** 2. More about AudioKeys: https://sonoport.github.io/prototyping-synths-with-AudioKeys.html
    ** 3. Discover Frequencies: https://www.idrumtune.com/ultimate-guide-to-musical-frequencies/  
    * Challenge: 
    ** 1: Let the note play until the user releases the key (extend sustain) 
    ** 2: Let the tone evolve over time
    * Question: Why is there no "play" button to get the sounds to play? Could we remove it from the step sequencer in Lesson 04? How?
    * Go Further: Follow this tutorial: https://www.youtube.com/watch?v=IT64QQo3jrM —it uses SASS, an extension of CSS: https://sass-lang.com/
    */





    //SETUP SOME EFFECTS


    //One: FeedbackDelay, two constructors: the simple version is commented out, notice that I've changed some values since last time I used this
    let fbDelay = new Tone.FeedbackDelay({
      delayTime: 0.1,
      feedback: 0.1,
      wet: 0.5
    });

    //Two: AutoWah, only parts of the options object are shown here, notice that I've changed some values since last time I used this
    const autWah = new Tone.AutoWah({
      gain: 0.5,
      octaves: 4,
      sensitivity: 0.5,
      wet: 1,
    })


    //instantiate Synth
    const synth = new Tone.PolySynth().connect(fbDelay)



    //gain is incredibly important here, without this rather low setting, the sounds created by different oscillators could be ear-splitting and even damage speakers
    const gain = new Tone.Gain(0.5);

    //connect each synth to the Feedback Delay, connect that to the Auto Wah, connect that to Gain and send that to the speakers —AGAIN, SET GAIN LOW!

    //fbDelay.connect(autWah);
    //autWah.connect(gain);
    fbDelay.connect(gain);
    gain.toDestination();

    const keyboard = new AudioKeys({
      rows: 2,
    });

    keyboard.down((key) => {
      console.log(key);
      synth.triggerAttackRelease(key.frequency, "8n")
    })


    //ADD 


    //LFO the three arguments are Hz, followed by the minimum and maximum "output values" which describe the low and high points of the waveform which we might normally associate with "volume"
    
    let lfo1 = new Tone.LFO(10, 4, 12);
    lfo1.connect(synth.volume);
    lfo1.start();



    // Arrow Key Listener

    document.addEventListener("keydown", function (e) {

      //arrow up raises gain by 0.1
      if (e.key === "ArrowUp") {
        gain.gain.value += 0.1;
        console.log("this is the up arrow: " + gain.gain.value);
        //if gain reaches 2 or higher, it's set to 2
        if (gain.gain.value >= 2) {
          gain.gain.value = 2;
          console.log("this is the up arrow: " + gain.gain.value);

        }
        //down arrow lowers gain by 0.1
      } else if (e.key === "ArrowDown") {
        gain.gain.value -= 0.1;
        console.log("this is the down arrow: " + gain.gain.value);
        //if gain reaches 0.1 or lower, it's set to 0.1
        if (gain.gain.value <= 0.1) {
          gain.gain.value = 0.1;
          console.log("this is the down arrow: " + gain.gain.value);
        }
      }

      //arrow left reduces fbDelay wet by 0.1
      else if (e.key === "ArrowLeft" && fbDelay.wet.value >= 0.2) {
        fbDelay.wet.value -= 0.1;
        console.log("this is the left arrow: " + fbDelay.wet.value);
      }

      //arrow right increases fbDelay wet by 0.1
      else if (e.key === "ArrowRight" && fbDelay.wet.value <= 0.8) {
        fbDelay.wet.value += 0.1;
        console.log("this is the right arrow: " + fbDelay.wet.value);
      }


    });




  </script>

</body>

</html>
